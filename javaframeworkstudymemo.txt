@Autowired 注解的作用
这个注解是属于 Spring 的容器配置的一个注解，因此 @Autowired 注解是一个用于容器 ( container ) 配置的注解。
在 Spring 的世界当中，自动装配指的就是使用将 Spring 容器中的 bean 自动的和我们需要这个 bean 的类组装在一起。

Spring IoC 容器
IoC 容器
Spring 容器是Spring框架的核心。容器将创建对象，把它们连接在一起，配置它们，并管理他们的整个生命周期从创建到销毁。Spring 容器使用依赖注入（DI）来管理组成一个应用程序的组件。这些对象被称为 Spring Beans。
通过阅读配置元数据提供的指令，容器知道对哪些对象进行实例化，配置和组装。配置元数据可以通过 XML，Java注释或Java代码来表示。下图是Spring如何工作的高级视图。Spring IoC容器利用Java的POJO类和配置元数据来生成完全配置和可执行的系统或应用程序。
IOC容器具有依赖注入功能的容器，它可以创建对象，IOC容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。通常new一个实例，控制权由程序员控制，而"控制反转"是指new实例工作不由程序员来做而是交给Spring容器来做。在Spring中BeanFactory是IOC容器的实际代表者。
ApplicationContext 容器包括 BeanFactory 容器的所有功能，所以通常不建议使用BeanFactory。BeanFactory 仍然可以用于轻量级的应用程序，如移动设备或基于 applet 的应用程序，其中它的数据量和速度是显著。

Spring ApplicationContext 容器
Application Context是 BeanFactory 的子接口，也被称为 Spring 上下文。
Application Context是 spring 中较高级的容器。和BeanFactory类似，它可以加载配置文件中定义的 bean，将所有的 bean 集中在一起，当有请求的时候分配 bean。另外，它增加了企业所需要的功能，比如，从属性文件中解析文本信息和将事件传递给所指定的监听器。这个容器在 org.springframework.context.ApplicationContext interface 接口中定义。
ApplicationContext包含BeanFactory所有的功能，一般情况下，相对于BeanFactory，ApplicationContext 会更加优秀。当然，BeanFactory 仍可以在轻量级应用中使用，比如移动设备或者基于applet的应用程序。

Bean定义
被称作 bean 的对象是构成应用程序的支柱也是由 Spring IoC 容器管理的。bean 是一个被实例化，组装，并通过 Spring IoC 容器所管理的对象。这些 bean 是由用容器提供的配置元数据创建的
bean 定义包含称为配置元数据的信息，下述容器也需要知道配置元数据：
如何创建一个 bean
bean 的生命周期的详细信息
bean 的依赖关系
上述所有的配置元数据转换成一组构成每个 bean 定义的下列属性。
属性	描述
class	这个属性是强制性的，并且指定用来创建 bean 的 bean 类。
name	这个属性指定唯一的 bean 标识符。在基于 XML 的配置元数据中，你可以使用 ID 和/或 name 属性来指定 bean 标识符。
scope	这个属性指定由特定的 bean 定义创建的对象的作用域，它将会在 bean 作用域的章节中进行讨论。
constructor-arg	它是用来注入依赖关系的，并会在接下来的章节中进行讨论。
properties	它是用来注入依赖关系的，并会在接下来的章节中进行讨论。
autowiring mode	它是用来注入依赖关系的，并会在接下来的章节中进行讨论。
lazy-initialization mode	延迟初始化的 bean 告诉 IoC 容器在它第一次被请求时，而不是在启动时去创建一个 bean 实例。
initialization 方法	在 bean 的所有必需的属性被容器设置之后，调用回调方法。它将会在 bean 的生命周期章节中进行讨论。
destruction 方法	当包含该 bean 的容器被销毁时，使用回调方法。它将会在 bean 的生命周期章节中进行讨论。
Spring 配置元数据
Spring IoC 容器完全由实际编写的配置元数据的格式解耦。有下面三个重要的方法把配置元数据提供给 Spring 容器：
基于 XML 的配置文件
基于注解的配置
基于 Java 的配置
提示：对于基于 XML 的配置，Spring 2.0 以后使用 Schema 的格式，使得不同类型的配置拥有了自己的命名空间，使配置文件更具扩展性。

Spring Bean 作用域
Bean 的作用域
当在 Spring 中定义一个 bean 时，你必须声明该 bean 的作用域的选项。例如，为了强制 Spring 在每次需要时都产生一个新的 bean 实例，你应该声明 bean 的作用域的属性为 prototype。同理，如果你想让 Spring 在每次需要时都返回同一个bean实例，你应该声明 bean 的作用域的属性为 singleton。
Spring 框架支持以下五个作用域，分别为 singleton、prototype、request、session 和 global session

web.xml
1.1. web.xml里要配置首页面；
1.2. web.xml里要配置过滤器；
1.3. web.xml里要配置拦截器；
1.4. web.xml里要配置servlet；
在实际项目中spring的配置文件applicationcontext.xml是通过spring提供的加载机制自动加载到容器中。在web项目中，配置文件加载到web容器中进行解析。目前，spring提供了两种加载器，以供web容器的加载：一种是ContextLoaderListener，另一种是ContextLoaderServlet。这两种在功能上完全相同，只是前一种是基于Servlet2.3版本中新引入的Listener接口实现，而后一种是基于Servlet接口实现，以下是这两种加载器在web.xml中的配置应用
ContextLoaderListener
<listener> 
<listener-class>org.springframework.context.ContextLoaderListener</listener-class> 
</listener> 
ContextLoaderServlet
<servlet> 
 <servlet-name>context</servlet-name> 
<servlet-class>org.springframework.context.ContextLoaderServlet</servlet-class> 
 <load-on-startup>1</load-on-startup> 
</servlet> 
通过上面的配置，web容器会自动加载applicationcontext.xml初始化。
如果需要指定配置文件的位置，可通过context-param加以指定：
<context-param> 
 <param-name>contextConfigLocation</param-name> 
 <param-value>/WEB-INF/myApplicationContext.xml</param-value> 
</context-param>
之后，可以通过WebApplicationContextUtils.getWebApplicationContext方法在web应用中获取applicationcontext的引用。
指定欢迎页面
<welcome-file-list>
  <welcome-file>index.jsp</welcome-file>
  <welcome-file>index1.jsp</welcome-file>
</welcome-file-list>
对于tomcat来说，当你只指定一个web的根名，没有指定具体页面，去访问时一个web时，如果web.xml文件中配置了欢迎页，那么就返回指定的那个页面作为欢迎页，而在文中没有web.xml文件，或虽然有web.xml，但web.xml也没指定欢迎页的情况下，它默认先查找index.html文件，如果找到了，就把index.html作为欢迎页还回给浏览器。如果没找到index.html，tomcat就去找index.jsp。找到index.jsp就把它作为欢迎页面返回。而如果index.html和index.jsp都没找到，又没有用web.xml文件指定欢迎页面，那此时tomcat就不知道该返回哪个文件了，它就显示The requested resource (/XXX) is not available(我就出现过这个问题)的页面。其中XXX表示web的根名。但如果你指定了具体页面，是可以正常访问的。
命名与定制URL
<servlet>
  <servlet-name>servlet1</servlet-name>
  <servlet-class>net.test.TestServlet</servlet-class>
</servlet>
  
<servlet-mapping>
  <servlet-name>servlet1</servlet-name>
  <url-pattern>*.do</url-pattern>
</servlet-mapping>
url-pattern的意思是所有的.do文件都会经过TestServlet处理。
定制初始化参数
<servlet>
  <servlet-name>servlet1</servlet-name>
  <servlet-class>net.test.TestServlet</servlet-class>
  <init-param>
     <param-name>userName</param-name>
     <param-value>Tommy</param-value>
  </init-param>
  <init-param>
     <param-name>E-mail</param-name>
     <param-value>Tommy@163.com</param-value>
  </init-param>
</servlet>
经过上面的配置，在servlet中能够调用getServletConfig().getInitParameter("param1")获得参数名对应的值。
//上下文参数：声明应用范围内的初始化参数。 
<context-param> 
  <param-name>ContextParameter</para-name> 
  <param-value>test</param-value> 
  <description>It is a test parameter.</description> 
</context-param> 
//在servlet里面可以通过getServletContext().getInitParameter("context/param")
经过上面的配置，在servlet中能够调用getServletConfig().getInitParameter("param1")获得参数名对应的值。
//上下文参数：声明应用范围内的初始化参数。 
<context-param> 
  <param-name>ContextParameter</para-name> 
  <param-value>test</param-value> 
  <description>It is a test parameter.</description> 
</context-param> 
//在servlet里面可以通过getServletContext().getInitParameter("context/param")
得到指定错误处理页面，可以通过“异常类型”或“错误码”来指定错误处理页面。
<error-page>
  <error-code>404</error-code>
  <location>/error404.jsp</location>
</error-page>
-----------------------------
<error-page>
  <exception-type>java.lang.Exception<exception-type>
  <location>/exception.jsp<location>
</error-page>
<error-page> 
   <exception-type>java.lang.NullException</exception-type> 
   <location>/error.jsp</location> 
</error-page>
设置过滤器：比如设置一个编码过滤器，过滤所有资源
<filter>
  <filter-name>XXXCharaSetFilter</filter-name>
  <filter-class>net.test.CharSetFilter</filter-class>
</filter>
<filter-mapping>
  <filter-name>XXXCharaSetFilter</filter-name>
  <url-pattern>/*</url-pattern>
</filter-mapping>
6.设置监听器
web.xml中的<listener></listener>有什么用? 没别的用处!就是配置监听类的~，它能捕捉到服务器的启动和停止! 在启动和停止触发里面的方法做相应的操作! 它必须在web.xml 中配置才能使用! web.xml 中listener元素不是只能有一个，有多个时按顺序执行。
如何在web.xml向listener中传参数 ？
<listener> 
<listener-class>监听器类的完整路径</listener-class> 
</listener>
监听器中不能够写初始化参数; 可通过另个的途径达到初始化参数的效果: 1.写一个properties文件,在文件里写好初始化参数值, 2.在监听器中可以通得到properties文件中的值(写在静态块中)。
设置会话(Session)过期时间，其中时间以分钟为单位
<session-config>
<session-timeout>60</session-timeout>
</session-config>
除了这些标签元素之外，还可以往web.xml中添加那些标签元素呢，那些标签元素都能起什么作用呢？我们只要去查看web.xml的模式文件就能知道。直接看模式文件看不懂，可以找一些中文教程来看看。
加载顺序与它们在 web.xml 文件中的先后顺序无关。即不会 因为 filter 写在 listener 的前面而会先加载 filter。最终得出的结论是：listener -> filter -> servlet 。<session-config></session-config> 如果某个会话在一定时间内未被访问，服务器可 以抛弃它以节省内存。可通过使用HttpSession的setMaxInactiveInterval方法明确设置单个会话对 象的超时值，或者可利用session-config元素制定缺省超时值。
<welcome-file-list></welcome-file-list> 指示服务器在收到引用一个目录名而不是 文件名的URL时，使用哪个文件。
web.xml中怎么配置url-pattern？ 首先要知道 web.xml 中url-pattern的作用，他是给外部提供的一个访问DoGetDemo类的接口，你可以自己随意定义，然后在IE里面写入这个配置内容。 可以看我给你写的一个例子图片，应该一下就看懂的，用 SimpleHello.java 为例，看图片，访问的时候，可以输入下面的网址 http://192.168.0.67:8888/book/hello 这样，服务器就可以通过 <url-pattern>/hello</url-pattern> 找到ch06.SimpleHello类，因此你的<url-pattern></url-pattern> 里面的内容可以自己定义。然后在应用目录下访问这个servlet 。
web.xml中既然有url-pattern为什么还需要servlet-class呢？url-pattern是表明什么格式的的url进入这个servlet ，servlet-class 是表明哪个java类来处理这个请求 ，一个请求过来，先到servlet-mapping中去根据请求的url寻找这个url所对应的url-pattern，找到url-pattern后找到了servlet-name， 然后根据servlet-name和servlet中的servlet-name对应找到其所对应的servlet-class，具体的业务逻辑就写在来servlet-class对应的java类中了！

pom.xml
POM是项目对象模型(Project Object Model)的简称,它是Maven项目中的文件，使用XML表示，名称叫做pom.xml。在Maven中，当谈到Project的时候，不仅仅是一堆包含代码的文件。一个Project往往包含一个配置文件，包括了与开发者有关的，缺陷跟踪系统，组织与许可，项目的URL，项目依赖，以及其他。它包含了所有与这个项目相关的东西。事实上，在Maven世界中，project可以什么都没有，甚至没有代码，但是必须包含pom.xml文件
pom里面的仓库与setting.xml里的仓库功能是一样的。主要的区别在于，pom里的仓库是个性化的。比如一家大公司里的setting文件是公用的，所有项目都用一个setting文件，但各个子项目却会引用不同的第三方库，所以就需要在pom里设置自己需要的仓库地址。
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
<!-- 声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 -->
  <modelVersion>4.0.0</modelVersion>
<!-- 项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成，如com.mycompany.app生成的相对路径为：/com/mycompany/app -->
  <groupId>jp.or.ucoop</groupId>
<!-- 构件的标识符，它和group ID一起唯一标识一个构件。本项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的；在某个特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源码，二进制发布和WARs等。 -->
  <artifactId>usys-cec-module-webapi</artifactId>
<!-- 项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 -->
  <version>1.0.0-SNAPSHOT</version>
<!-- 项目的名称, Maven产生的文档用 -->
  <name>usys-cec-module-webapi</name>
<!-- 为pom定义一些常量，在pom中的其它地方可以直接引用 使用方式 如下 ：${file.project.build.sourceEncoding} -->
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- バージョン指定（基盤ライブラリ）  -->
    <cai-webapi-version>1.1.4-SNAPSHOT</cai-webapi-version>
    <uc-webapi-version>1.1.4-SNAPSHOT</uc-webapi-version>
    <usys-fw-webapi-version>1.1.4-SNAPSHOT</usys-fw-webapi-version>
    <!-- バージョン指定（共通ライブラリ）  -->
    <usys-common-webapi-version>1.0.5-SNAPSHOT</usys-common-webapi-version>
  </properties>

<!-- 构建项目需要的信息 -->
  <build>
<!-- 产生的构件的文件名，默认值是${artifactId}-${version}。 -->
    <finalName>usys-cec-module-webapi</finalName>
<!-- 使用的插件列表 。 -->
    <plugins>
<!-- plugin元素包含描述插件所需要的信息。 -->
      <plugin>
<!-- 插件在仓库里的group ID -->
        <groupId>org.apache.maven.plugins</groupId>
<!-- 插件在仓库里的artifact ID -->
        <artifactId>maven-compiler-plugin</artifactId>
<!-- 被使用的插件的版本（或版本范围） -->
        <version>3.1</version>
<!-- 配置是否被传播到子POM -->
        <inherited>true</inherited>
<!-- 作为DOM对象的配置 -->
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>
    </plugins>
  </build>

<!-- 项目引入插件所需要的额外依赖 -->
  <dependencies>
    <!-- 基盤ライブラリ -->
<!-- 每个dependency都对应这一个jar包 -->
    <dependency>
<!-- 一般情况下，maven是通过groupId、artifactId、version这三个元素值（俗称坐标）来检索该构件， 然后引入你的工程。如果别人想引用你现在开发的这个项目（前提是已开发完毕并发布到了远程仓库），就需要在他的pom文件中新建一个dependency节点，将本项目的groupId、artifactId、version写入， maven就会把你上传的jar包下载到他的本地 --> 
      <groupId>jp.or.ucoop</groupId>
      <artifactId>cai-webapi</artifactId>
      <version>${cai-webapi-version}</version>
    </dependency>
    <dependency>
      <groupId>jp.or.ucoop</groupId>
      <artifactId>uc-webapi</artifactId>
      <version>${uc-webapi-version}</version>
    </dependency>
    <dependency>
      <groupId>jp.or.ucoop</groupId>
      <artifactId>usys-fw-webapi</artifactId>
      <version>${usys-fw-webapi-version}</version>
    </dependency>
    <!-- 共通ライブラリ -->
    <dependency>
      <groupId>jp.or.ucoop</groupId>
      <artifactId>usys-common-webapi</artifactId>
      <version>${usys-common-webapi-version}</version>
    </dependency>

    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>4.0.1</version>
<!-- maven认为，程序对外部的依赖会随着程序的所处阶段和应用场景而变化，所以maven中的依赖关系有作用域(scope)的限制。scope包含如下的取值：compile（编译范围）、provided（已提供范围）、runtime（运行时范围）、test（测试范围）、system（系统范围） -->
      <scope>provided</scope>
    </dependency>
  </dependencies>
</project>

applicationContextTest.xml
1. beans标签
Spring配置文件的根元素是beans节点，在该节点内，我们可以配置Spring内置的各种命名空间以及bean默认的几项配置，通过配置各种命名空间，然后使用各命名空间的元素来完成对Spring的配置。
bean元素是Spring中最基本的配置单元，用来管理对象。通过该元素，Spring将创建一个对象，并在容器加载的时候实例化该对象
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
    xmlns:c="http://www.springframework.org/schema/c"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/jee
        http://www.springframework.org/schema/jee/spring-jee.xsd
        http://mybatis.org/schema/mybatis-spring
        http://mybatis.org/schema/mybatis-spring.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- 環境によって異なる設定値の設定ファイルを指定。
         開発環境では同じプロジェクト内のファイルが参照され、
         検証環境ではTomcatのshared/libのファイルが参照されるようにする想定。 -->
    <context:property-placeholder location="classpath:env.properties"/>

    <!--
      Springコンポーネントの検索
      @Component, @Controller, @Service, @Repositoryが付加されているか、
      それらがメタアノテーションに持つアノテーションが付加されているクラスを登録する。
     -->
Spring容器初始化的时候，会扫描jp.or.ucoop.uc.ucfw,jp.or.ucoop.usys.common,jp.or.ucoop.usys.cac,jp.or.ucoop.usys.cec下标有(@Component,@Service,@Controller,@Repository)注解的类纳入spring容器管理
    <context:component-scan base-package="jp.or.ucoop.uc.ucfw,jp.or.ucoop.usys.common,jp.or.ucoop.usys.cac,jp.or.ucoop.usys.cec" >
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- データソース -->
    <!-- 建立数据源 -->
    <!--
    <bean id="dataSource"
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">
      <!-- 数据库驱动 -->
      <property name="driverClassName" value="${cai.db.driver}" />
      <!-- 数据库地址 -->
      <property name="url" value="${cai.db.url}" />
      <!-- 数据库的用户名 -->
      <property name="username" value="${cai.db.userId}" />
      <!-- 数据库的密码 -->
      <property name="password" value="${cai.db.password}" />
    </bean>
     -->
    <bean id="dataSource"
        class="com.zaxxer.hikari.HikariDataSource">
      <property name="driverClassName" value="${cai.db.driver}" />
      <property name="jdbcUrl" value="${cai.db.url}" />
      <property name="username" value="${cai.db.userId}" />
      <property name="password" value="${cai.db.password}" />
    </bean>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- @Transactionalを指定したクラスを検索し、トランザクション境界とする -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- MyBatis -->
    <!-- Daoの検索 -->
    <mybatis:scan base-package="jp.or.ucoop" annotation="jp.or.ucoop.cai.mybatis.MyBatisDao"/>
    <mybatis:scan base-package="jp.or.ucoop.usys.common.generated.mapper" />
    <!-- MyBatisの設定 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
       <property name="dataSource" ref="dataSource" />
       <property name="configLocation" value="classpath:mybatisConfig.xml" />
    </bean>

    <bean id="request" class="org.springframework.mock.web.MockHttpServletRequest"></bean>
</beans>

spring中的ioc和di
IoC—Inversion of Control 控制反转
在Java开发中，IoC意味着将你设计好的类交给系统去控制，而不是在你的类内部控制。IoC是一种让服务消费者不直接依赖于服务提供者的组件设计方式，是一种减少类与类之间依赖的设计原则。
是框架的重要特征，做到控制反转需要一个容器来实现，就是我们所说的IoC容器，最常见的IoC容器是Spring。原来一个应用程序内的对象是类通过new去主动创建并实例化的，对对像创建的主动权在程序代码中。程序不仅要管理业务逻辑也要管理对的象创建和依赖关系。这是很累的，也跟软件工程 "低耦合高内聚" 的概念不十分符合。但是控制反转是在容器初始化（或者某个指定时间节点）时通过反射机制（上一篇文章有介绍）创建好对象，在使用时去容器中获取。将对象的控制权反过来交给容器管理，所以称之为“控制反转”。IoC容器的底层实现其实是工厂模式，通过工厂模式和反射机制，根据XML中给出的类名生成相应的对象。其实IoC容器的实现很简单，就是一个HashMap
有了spring的ioc容器之后，对象的实例化和依赖关系管理都由IOC容器进行统一管理，主体类只要依赖ioc容器就够了，需要啥，容器会给他注入进去，也就是只要声明对象不用再主动去new，ioc容器帮忙把相应的对象注入到声明对象中，使其变成实例化对象。
控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IOC容器，其实现方法是依赖注入（Dependency Injection,DI）。
IoC容器是Spring的核心，也可以称为Spring容器。Spring通过 IoC 容器来管理对象的实例化和初始化，以及对象从创建到销毁的整个生命周期。由 IoC 容器管理的对象称为 Spring Bean，Spring Bean 就是 Java 对象，和使用 new 运算符创建的对象没有区别。Spring 通过读取 XML 或 Java 注解中的信息来获取哪些对象需要实例化。Spring 提供 2 种不同类型的 IoC 容器，即 BeanFactory 和 ApplicationContext 容器。
是一个概念，是一种思想。指将传统上由程序代码直接操控的对象调用权交给容器，通过容器来实现对象的装配和管理。控制反转就是对对象控制权的转移，从程序代码本身反转到了外部容器。通过容器实现对象的装配和管理。通俗点讲，将对象的创建权交给spring，我们需要new对象，则由spring帮我们创建，然后供我们使用。那么必然的我们需要创建一个容器，同时需要一种描述来让容器知道需要创建的对象与对象的关系。这个描述最具体表现就是我们可配置的文件。IoC的实质是如何管理对象，传统意义上我们使用new方式来创建对象，但在企业应用开发的过程中，大量的对象创建都在程序中维护很容易造成资源浪费，并且不利于程序的扩展。其实现方式多种多样。当前比较流行的实现方式是依赖 注入。应用广泛。
IoC是Spring框架的核心内容，使用多种方式完美的实现了IoC，可以使用XML配置，也可以使用注解，新版本的Spring也可以零配置实现IoC。
Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从Ioc容器中取出需要的对象。控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。
这样做的好处是什么呢？当然就是所谓的“解耦”了，可以使得程序的各模块之间的关系更为独立，只需要spring控制这些模块之间的依赖关系并在容器启动和初始化的过程中将依据这些依赖关系创建、管理和维护这些模块就好，如果需要改变模块间的依赖关系的话，甚至都不需要改变程序代码，只需要将更改的依赖关系进行修改即可，spring会在再次启动和初始化容器的过程中使得这些新的依赖关系重新建立符合新需求的模块，在这个过程中，需要注意的是代码本身不需要体现对于模块具体依赖情形的声明而只需要定义其所需模块的接口，所以这是一种典型的面向接口思想，同时最好将依赖关系以配置文件或者注解的形式表述出来，相关的spring处理类会根据这些外部的配置文件组装模块，或者扫描注解调用内部的注解处理器组装模块，以此完成IOC的过程。

DI——Dependency Injection（依赖注入）
即组件之间的依赖关系由容器在运行期决定，形象的来说，即由容器动态的将某种依赖关系注入到组件之中。依赖注入的目标并非为软件系统带来更多的功能，而是为了提升组件重用的概率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务 逻辑，而不用关心具体的资源来自何处、由谁实现。
IOC 还体现在自动注入依赖，依赖注入简单的理解为绑定数据，这是一种具体的技术，IOC 是思想，DI是技术实现。对象之中需要其它的对象，类如 Service 层中需要 DAO 层对象，我们不需要在 Service 中手动 new 了，只需要配置一下即可。常用的注入方式有两种，set方法注入和构造方法注入。而每一种注入方式中又有注入基本数据类型和引用数据类型之分。
依赖注入和依赖查找是IoC的两种主要实现方式.可以把DI和IoC理解为同一件事，都是把创建实例的控制权交给容器来操作，只是两种叫法的角度不同：控制反转是从代码操作对象的角度来看，将操作对象的控制权反转交给了容器；依赖注入是从容器的角度看，我把你需要的对象或属性注入到你代码中去。
依赖：classA 类中含有 classB 的实例，在 classA 中调用 classB 的方法完成功能，即 classA 对 classB 有依赖。
IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。

基于注解的依赖注入
spring容器对于Bean的创建和对象属性的依赖注入提供了注解的支持，让我们在开发中能够更加便捷的实现对象的创建和对象属性的依赖注入。
一，对于Bean的创建spring容器提供了以下四个注解的支持：
1、@Component　是所有受Spring 管理组件的通用形式，@Component注解可以放在类的头上，@Component不推荐使用。把资源让spring来管理。相当于xml中配置一个bean。value：指定bean的id，如果不指定value属性，默认bean的id是当前类的类名。首字母小写
2、@Repository　　dao层持久层实现类的注解
3、@Service　　service层业务层实现类的注解
4、@Controller　　 controller层表现层实现类的注解
以上四个注解在普通使用中是等效的，但在web项目中为了区分三层架构中不同层之间Bean的创建，为了避免注解使用的混乱，使用后三个注解进行区分。

二，对于Bean属性的依赖注入分为两类，一类是对于属性是String类型或者基本数据类型Spring容器提供了@Value这个注解，另一类是对于属性是对象的提供了@Autowired和@Resource这两个注解。
其中，@Autowired这个注解是spring框架自带的注解，而@Resource(javax.annotation.Resource)这个注解是javax扩展包中注解规范的一种，而spring对这一注解提供了支持。
首先要在配置文件中配置注解扫描的驱动。
<context:annotation-config/>
<context:component-scan base-package="com.opensource"/>
如果配置了注解扫描包的范围，也就是第二行，那么<context:annotation-config/>可以不用配置，因为配置扫描包的范围后，注解的驱动也就有了。
表明com.opensource包及其子包中，如果某个类的头上带有特定的注解【@Component/@Repository/@Service/@Controller】，就会将这个对象作为Bean注册进Spring容器。也可以在<context:component-scan base-package=” ”/>中指定多个包，多个包逗号隔开。
@Controller
@Controller对应表现层的Bean，也就是Action，例如：
@Controller
@Scope("prototype")
public class UserAction extends BaseAction<User>{
……
}
使用@Controller注解标识UserAction之后，就表示要把UserAction交给Spring容器管理，在Spring容器中会存在一个名字为"userAction"的action，这个名字是根据UserAction类名来取的。注意：如果@Controller不指定其value【@Controller】，则默认的bean名字为这个类的类名首字母小写，如果指定value【@Controller(value="UserAction")】或者【@Controller("UserAction")】，则使用value作为bean的名字。
这里的UserAction还使用了@Scope注解，@Scope("prototype")表示将Action的范围声明为原型，可以利用容器的scope="prototype"来保证每一个请求有一个单独的Action来处理，避免struts中Action的线程安全问题。spring 默认scope 是单例模式(scope="singleton")，这样只会创建一个Action对象，每次访问都是同一Action对象，数据不安全，struts2 是要求每次次访问都对应不同的Action，scope="prototype" 可以保证当有请求的时候都创建一个Action对象
@ Service
@Service对应的是业务层Bean，例如：
@Service("userService")
 public class UserServiceImpl implements UserService {
 ………
 }
@Service("userService")注解是告诉Spring，当Spring要创建UserServiceImpl的的实例时，bean的名字必须叫做"userService"，这样当Action需要使用UserServiceImpl的的实例时,就可以由Spring创建好的"userService"，然后注入给Action：在Action只需要声明一个名字叫“userService”的变量来接收由Spring注入的"userService"即可，具体代码如下：
// 注入userService
@Resource(name = "userService")
private UserService userService;
在Action声明的“userService”变量的类型必须是“UserServiceImpl”或者是其父类“UserService”，否则由于类型不一致而无法注入，由于Action中的声明的“userService”变量使用了@Resource注解去标注，并且指明了其name = "userService"，这就等于告诉Spring，说我Action要实例化一个“userService”，你Spring快点帮我实例化好，然后给我，当Spring看到userService变量上的@Resource的注解时，根据其指明的name属性可以知道，Action中需要用到一个UserServiceImpl的实例，此时Spring就会把自己创建好的名字叫做"userService"的UserServiceImpl的实例注入给Action中的“userService”变量，帮助Action完成userService的实例化，这样在Action中就不用通过“UserService userService = new UserServiceImpl();”这种最原始的方式去实例化userService了。
如果没有Spring，那么当Action需要使用UserServiceImpl时，必须通过“UserService userService = new UserServiceImpl();”主动去创建实例对象，但使用了Spring之后，Action要使用UserServiceImpl时，就不用主动去创建UserServiceImpl的实例了，创建UserServiceImpl实例已经交给Spring来做了，Spring把创建好的UserServiceImpl实例给Action，Action拿到就可以直接用了。
Action由原来的主动创建UserServiceImpl实例后就可以马上使用，变成了被动等待由Spring创建好UserServiceImpl实例之后再注入给Action，Action才能够使用。
这说明Action对“UserServiceImpl”类的“控制权”已经被“反转”了，原来主动权在自己手上，自己要使用“UserServiceImpl”类的实例，自己主动去new一个出来马上就可以使用了，但现在自己不能主动去new“UserServiceImpl”类的实例，new“UserServiceImpl”类的实例的权力已经被Spring拿走了，只有Spring才能够new“UserServiceImpl”类的实例，而Action只能等Spring创建好“UserServiceImpl”类的实例后，再“恳求”Spring把创建好的“UserServiceImpl”类的实例给他，这样他才能够使用“UserServiceImpl”，这就是Spring核心思想“控制反转”，也叫“依赖注入”，“依赖注入”也很好理解，Action需要使用UserServiceImpl干活，那么就是对UserServiceImpl产生了依赖，Spring把Acion需要依赖的UserServiceImpl注入(也就是“给”)给Action，这就是所谓的“依赖注入”。对Action而言，Action依赖什么东西，就请求Spring注入给他，对Spring而言，Action需要什么，Spring就主动注入给他。
@ Repository
@Repository对应数据访问层Bean ，例如：
@Repository(value="userDao")
public class UserDaoImpl extends BaseDaoImpl<User> {
………
}
@Repository(value="userDao")注解是告诉Spring，让Spring创建一个名字叫“userDao”的UserDaoImpl实例。
当Service需要使用Spring创建的名字叫“userDao”的UserDaoImpl实例时，就可以使用@Resource(name = "userDao")注解告诉Spring，Spring把创建好的userDao注入给Service即可。
// 注入userDao，从数据库中根据用户Id取出指定用户时需要用到
@Resource(name = "userDao")
private BaseDao<User> userDao;
@Resource、@AutoWired、@Qualifier都用来注入对象。其中@Resource可以以name或type方式注入，@AutoWired只能以type方式注入，@Qualifier只能以name方式注入。
@Autowired：自动按照类型注入。当使用注解注入属性时，set方法可以省略。它只能注入其他bean类型。当有多个类型匹配时。使用要注入的对象变量名称作为bean的id，在spring容器中查找，找到了注入成功，找不到就报错。
@Qualifier：在自动按照类型注入的基础上，再按照Bean的id注入。它在给字段注入时不能单独使用，必须和@Autowire一起使用；但是给方法参数注入时，可以单独使用。value属性是指定Bean的id
@Resource：直接按照Bean的id注入。它也只能注入其他Bean类型。name属性是指定Bean的id
@Value：注入基本数据类型和String类型数据
@Scope：指定Bean的作用范围。value属性指定范围的值--singleton单例，prototype多例，request作用与web应用的请求范围，session作用与web应用的会话范围，global-session作用与集群环境中会话范围
但它们有一些细微区别：
1、@Resource、@Qualifier默认按 byName自动注入，@Autowired默认按byType自动注入。
2、@Resource有两个属性是比较重要的，分是name和type。如果使用name属性，则使用byName的自动注入策略。而使用type属性时则使用byType自动注入策略。
3、@Resources是JDK提供的注解，而@Autowired是Spring提供的注解。
可以把@Resource当成@AutoWired @Qualifier的老大。你们有的，我都有，你们没有的，我也有

Spring AOP
AOP (Aspect Oriented Programming)意为：面向切面编程，通过预编译方式和运行期动态代理实现在不修改源代码的情况下，给程序动态统一添加功能的一种技术，可以理解成动态代理。是Spring框架中的一个重要内容。利用 AOP 可以对业务逻辑的各个部分进行隔离，使业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高开发的效率
为什么需要切面类?
在软件开发的过程中，有很多业务，特别是在编写核心业务的时候，往往需要很多其他的辅助业务，比如说身份验证（银行转账需要身份验证）、数据缓存、日志输出。这些往往在某个核心业务中处于辅助的部分。这些辅助的任务都有个特点，就是这些业务都处在核心业务的同一个切面上
切面类中有什么?
前置通知（Before）：在目标方法执行之前执行某段代码
后置通知（AfterReturning）：在目标方执行完成后执行，如果目标方法异常，则后置通知不再执行某段代码
异常通知（Afterthrowing）：目标方法抛出异常的时候执行某段代码
最终通知（After）；不管目标方法是否有异常都会执行，相当于try…catch…finally中的finally。
环绕通知（Around）：可以控制目标方法是否执行
这些通知有什么用？
不需要再核心代码内部添加多余的代码，而是在调用核心代码前、后、抛异常、结束时调用某部分代码。
这里涉及到了反射的知识，因为这些通知的实现底层就是动态代理或cglib。简单来说，就是在调用核心代码前，调用的方法会被拦截下来，然后执行切面类中的某段代码。

AOP在Spring中的作用
提供声明式事务；允许用户自定义切面
AOP的基本概念
横切关注点：跨越应用程序多个模块的方法或功能。即与我们业务逻辑无关，但需要我们关注的部分就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 ....
Aspect(切面)：横切关注点被模块化的特殊对象。通常是一个类，里面可以定义切入点和通知
Weaving(织入)：把切面（aspect）连接到其它的应用程序类型或者对象上，并创建一个被通知（advised）的对象。 这些可以在编译时，类加载时和运行时完成。Spring和其它纯Java AOP框架一样，在运行时完成织入
Advice(通知)：AOP在特定的切入点上执行的增强处理，是切面必须要完成的工作，也是类中的一个方法
Target(目标)：被通知对象
AOP(代理)：AOP框架创建的对象，代理就是目标对象的加强。Spring中的AOP代理可以是JDK动态代理，也可以是CGLIB代理，前者基于接口，后者基于子类
JointPoint(连接点)：程序执行过程中明确的点，一般是方法的调用
Pointcut(切入点):就是带有通知的连接点，与切入点匹配的执行点
Spring AOP类的实现技术
动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因为这个技术要求代理对象和目标对象实现同样的接口（兄弟两个拜把子模式）。
cglib：通过继承被代理的目标类（认干爹模式）实现代理，所以不需要目标类实现接口。
AspectJ：本质上是静态代理，将代理逻辑“织入”被代理的目标类编译得到的字节码文件，所以最终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。
使用Spring实现Aop
方式一：通过Spring API实现【主要是springAPI接口实现】
首先编写业务接口和实现类
public interface UserService {
  public void add();
  public void delete();
  public void update();
  public void search();
}
public class UserServiceImpl implements UserService{
  public void add() {
    System.out.println("增加了一个用户");
  }
 
  public void delete() {
    System.out.println("删除了一个用户");
  }
 
  public void update() {
    System.out.println("更新了一个用户");
  }
 
  public void select() {
    System.out.println("查询了一个用户");
  }
}
接着编写增强类，这里写两个：前置增强Log和后置增强AfterLog
import org.springframework.aop.MethodBeforeAdvice;
import java.lang.reflect.Method;
public class Log implements MethodBeforeAdvice {
  //method： 要执行的目标对象的方法
  //args： 参数
  //target: 目标对象
  public void before(Method method, Object[] args, Object target) throws Throwable {
    System.out.println(target.getClass().getName()+"的"+method.getName()+"被执行了");
  }
}
import org.springframework.aop.AfterReturningAdvice;
import java.lang.reflect.Method;
public class AfterLog implements AfterReturningAdvice {
  //returnValue;返回值
  public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {
    System.out.println("执行了"+method.getName()+"方法，返回结果为："+returnValue);
  }
}
最后在Spring的文件中注册（applicationContext.xml），并实现AOP切入，注意导入约束
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    https://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/aop
    https://www.springframework.org/schema/aop/spring-aop.xsd">
 
  <!--注册bean-->
  <bean id="userService" class="com.lf.service.UserServiceImpl"/>
  <bean id="log" class="com.lf.log.Log"/>
  <bean id="afterLog" class="com.lf.log.AfterLog"/>
   
  <!--方式一：使用原生Spring API接口 -->
  <!--配置aop:需要导入aop的约束-->
  <aop:config>
  <!--切入点：expression:表达式，execution(要执行的位置！ * * * * *) -->
  <aop:pointcut id="pointcut" expression="execution(* com.lf.service.UserServiceImpl.*(..))"/>
  <!--执行环绕; advice-ref执行方法 . pointcut-ref切入点-->
  <aop:advisor advice-ref="log" pointcut-ref="pointcut"/>
  <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>
  </aop:config>

</beans>
进行测试：
import com.lf.service.UserService;
import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
 
public class MyTest {
  @Test
  public void test(){
  ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
  UserService userService1 = (UserService) context.getBean("userService");
  UserService userService = (UserService) context.getBean("userService");
  userService.add();
  }
}
运行结果：
com.lf.service.UserServiceImpl的add被执行了
增加了一个用户
执行了add方法，返回结果为：null
方式二：自定义类实现AOP【主要是切面定义】
目标业务类不变，还是方式一中的UserServiceImpl
写入一个切入类
public class DiyPointCut {
  public void before(){
    System.out.println("========方法执行前=========");
  }
 
  public void after(){
    System.out.println("========方法执行后=========");
  }
}
在Spring中配置（applicationContext.xml）
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    https://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/aop
    https://www.springframework.org/schema/aop/spring-aop.xsd">
 
  <!--注册bean-->
  <bean id="userService" class="com.lf.service.UserServiceImpl"/>
  <bean id="log" class="com.lf.log.Log"/>
  <bean id="afterLog" class="com.lf.log.AfterLog"/>
   
  <!--方式二：自定义类-->
  <bean id="diy" class="com.lf.diy.DiyPointCut"/>
 
  <aop:config>
  <!--自定义切面， ref 要引用的类-->
  <aop:aspect ref="diy">
  <!--切入点-->
  <aop:pointcut id="point" expression="execution(* com.lf.service.UserServiceImpl.*(..))"/>
  <!--通知-->
  <aop:before method="before" pointcut-ref="point"/>
  <aop:after method="after" pointcut-ref="point"/>
  </aop:aspect>
  </aop:config>
</beans>
在上面的 MyTest.java 中测试，得到结果：
========方法执行前=========
增加了一个用户
========方法执行后=========
方式三：使用注解实现【多用】
编写一个注解实现的增强类
package com.lf.diy;
 
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.Signature;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
 
@Aspect //标注这个类是一个切面
public class AnnotationPointCut {
 
  @Before("execution(* com.lf.service.UserServiceImpl.*(..))")
  public void before(){
    System.out.println("=====方法执行前======");
  }
 
  @After("execution(* com.lf.service.UserServiceImpl.*(..))")
  public void after(){
    System.out.println("=====方法执行后======");
  }
 
  //在环绕增强中，我们可以给定一个参数，代表我们要获取处理切入的点；
  @Around("execution(* com.lf.service.UserServiceImpl.*(..))")
  public void around(ProceedingJoinPoint jp) throws Throwable {
    System.out.println("环绕前");
    Signature signature = jp.getSignature();//获得签名
    System.out.println("signature:"+signature);
 
    Object proceed = jp.proceed();  //执行方法
    System.out.println("环绕后");
 
    System.out.println(proceed);
  }
 
}
在Spring配置文件中，注册bean，并增加支持注解的配置
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    https://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/aop
    https://www.springframework.org/schema/aop/spring-aop.xsd">
 
  <!--注册bean-->
  <bean id="userService" class="com.lf.service.UserServiceImpl"/>
  <bean id="log" class="com.lf.log.Log"/>
  <bean id="afterLog" class="com.lf.log.AfterLog"/>
 
  <!--方式三-->
  <bean id="annotationPointCut" class="com.lf.diy.AnnotationPointCut"/>
  <!--开启注解支持！  JDK(默认 proxy-target-class="false")  cglib（proxy-target-class="true"）-->
  <aop:aspectj-autoproxy/>
</beans>
在 MyTest.java 中测试
import com.lf.service.UserService;
import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
public class MyTest {
  @Test
  public void test(){
  ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
  UserService userService = (UserService) context.getBean("userService");
  userService.add();
  }
}
得到结果：

环绕前
signature:void com.lf.service.UserService.add()
=====方法执行前======
增加了一个用户
=====方法执行后======
环绕后
null

参数校验
在日常的开发中，经常需要对方法参数进行校验（非空、长度等）。如果采用hardcode去校验（if..else..），会造成代码冗余，复用性低，导致维护成本比较高。借助Validation组件，可以很方便地通过注解来校验参数。
JSR 是一种规范标准，规定了一些校验规范的注解，位于javax.validation.constraints包下，只提供规范不提供实现，如@NotNull，@Size 等
hibernate Validation与hibernate ORM框架没有关系，它提供了JSR的实现，位于org.hibernate.validator.constraints包下。
@Valid
JSR提供了一个@Valid注解供以使用，在本文之前，绝大多数小伙伴都是在Controller中并且结合@RequestBody一起来使用它
该注解用于验证级联的属性、方法参数或方法返回类型。
当验证属性、方法参数或方法返回类型时，将验证对象及其属性上定义的约束，另外：此行为是递归应用的。
什么叫级联校验，其实就是带校验的成员里存在级联对象时，也要对它完成校验。这个在实际应用场景中是比较常见的，比如入参Person对象中，还持有Child对象，我们不仅仅要完成Person的校验，也依旧还要对Child内的属性校验：
用于验证注解是否符合要求，直接加在变量user之前，在变量中添加验证信息的要求，当不符合要求时就会在方法中返回message的错误提示信息。
@RestController
@RequestMapping("/user")
public class UserController {
    @PostMapping
    public User create (@Valid @RequestBody User user) {
        System.out.println(user.getId());
        System.out.println(user.getUsername());
        System.out.println(user.getPassword());
        user.setId("1");
        return user;
    }
}  
在实体类的相应字段上添加用于充当校验条件的注解:
public class User {
    private String id;  
 
    @NotBlank(message = "密码不能为空")
    private String password;
}
@NotBlank注解所指的password字段，表示验证密码不能为空，如果为空的话，上面Controller中的create方法会将message中的"密码不能为空"返回。
也可以添加其他验证信息的要求：

@Constraint
自定义了注解，那么注解的逻辑在哪里处理呢？没错，就是这个@Constraint帮我们处理。
@Constraint(validatedBy = {SameTenant.StringChecker.class, SameTenant.LongChecker.class}) 
这段代表注解的处理逻辑是SameTenant.StringChecker.class和SameTenant.LongChecker.class这两个类，也可以只定义一个，多个用逗号分开。



限制	说明
@Null	限制只能为null
@NotNull	限制必须不为null
@AssertFalse	限制必须为false
@AssertTrue	限制必须为true
@DecimalMax(value)	限制必须为一个不大于指定值的数字
@DecimalMin(value)	限制必须为一个不小于指定值的数字
@Digits(integer,fraction)	限制必须为一个小数，且整数部分的位数不能超过integer，小数部分的位数不能超过fraction
@Future	限制必须是一个将来的日期
@Max(value)	限制必须为一个不大于指定值的数字
@Min(value)	限制必须为一个不小于指定值的数字
@Past	限制必须是一个过去的日期
@Pattern(value)	限制必须符合指定的正则表达式
@Size(max,min)	限制字符长度必须在min到max之间
@Past	验证注解的元素值（日期类型）比当前时间早
@NotEmpty	验证注解的元素值不为null且不为空（字符串长度不为0、集合大小不为0）
@NotBlank	验证注解的元素值不为空（不为null、去除首位空格后长度为0），不同于@NotEmpty，@NotBlank只应用于字符串且在比较时会去除字符串的空格
@Email	验证注解的元素值是Email，也可以通过正则表达式和flag指定自定义的email格式
除此之外还可以自定义验证信息的要求，例如下面的 @MyConstraint：
public class User {
    private String id;
    @MyConstraint(message = "这是一个测试")
    private String username;
}
注解的具体内容：
@Constraint(validatedBy = {MyConstraintValidator.class})
@Target({ELementtype.METHOD, ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
public @interface MyConstraint {
    String message();
    Class<?>[] groups() default {};
    Class<? extends Payload>[] payload() default {}; 
}
下面是校验器：
public class MyConstraintValidator implements ConstraintValidator<MyConstraint, Object> {
    @Autowired
    private UserService userService;
    
    @Override
    public void initialie(@MyConstraint constarintAnnotation) {
        System.out.println("my validator init");
    }
    
    @Override
    public boolean isValid(Object value, ConstraintValidatorContext context) {
        userService.getUserByUsername("seina");
        System.out.println("valid");
        return false;
    }
}

Java注解(annotation)
java内置注解
java内置了一些注解，有些是辅助编译器一起编译时做验证使用，下面两个注解就是java内置的注解，他们用于为我们定义的注解指定某些特性：
@Target
用于指定我们定义的注解可以被应用在哪里，具体的位置被枚举类型ElementType定义，例如：
     ElementType.TYPE：在类上可以使用当前注解,即只能标注在类上
     ElementType.METHOD：在方法上可以使用当前注解,即只能标注在方法上
     ElementType. FIELD：在属性上可以使用当前注解,即只能标注在属性上
@Retention
用于我们定义的注解的保留级别
      RetentionPolice.RUNTIME：最常用，保留在字节码文件中且在该类运行时可被反射机制利用
      RetentionPolice.CLASS：保留在字节码中，但是反射机制不可用，如若不写默认@Retention就是该级别
      RetentionPolice.SOURCE：保留在源码中
1、元注解
元注解是指注解的注解。包括@Retention @Target @Document @Inherited四种。
1.Annotation型定义为@interface, 所有的Annotation会自动继承java.lang.Annotation这一接口,并且不能再去继承别的类或是接口.
2.参数成员只能用public或默认(default)这两个访问权修饰
3.参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和String、Enum、Class、annotations等数据类型,以及这一些类型的数组.
4.要获取类方法和字段的注解信息，必须通过Java的反射技术来获取Annotation对象,因为你除此之外没有别的获取注解对象的方法
5.注解也可以没有定义成员,不过这样注解就没啥用了
自定义注解类时, 可以指定目标(类、方法、字段,构造函数等),注解的生命周期(运行时,class文件或者源码中有效),是否将注解包含在javadoc中及是否允许子类继承父类中的注解, 具体如下:
1.@Target表示该注解目标,可能的 ElemenetType 参数包括:
ElemenetType.CONSTRUCTOR 构造器声明
ElemenetType.FIELD 域声明(包括 enum 实例) 
ElemenetType.LOCAL_VARIABLE 局部变量声明 
ElemenetType.METHOD 方法声明 
ElemenetType.PACKAGE 包声明 
ElemenetType.PARAMETER 参数声明 
ElemenetType.TYPE类，接口(包括注解类型)或enum声明
2.@Retention表示该注解的生命周期,可选的RetentionPolicy参数包括
RetentionPolicy.SOURCE注解将被编译器丢弃 
RetentionPolicy.CLASS注解在class文件中可用，但会被VM丢弃 
RetentionPolicy.RUNTIME VM将在运行期也保留注释，因此可以通过反射机制读取注解的信息
RetentionPolicy.SOURCE注解将被编译器丢弃 
RetentionPolicy.CLASS注解在class文件中可用，但会被VM丢弃 
RetentionPolicy.RUNTIMEVM将在运行期也保留注释，因此可以通过反射机制读取注解的信息
3.@Documented 指示将此注解包含在javadoc中
4.@Inherited 指示允许子类继承父类中的注解

